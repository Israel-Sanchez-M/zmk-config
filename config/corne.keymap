/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shiftnCaps: shiftnCaps {
            compatible = "zmk,behavior-tap-dance";
            label = "Turns caps on on twice";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&all_caps_untilspace>;
        };

        all_caps_untilspace: all_caps_untilspace {
            compatible = "zmk,behavior-caps-word";
            label = "ALL_CAPS_UNTILSPACE";
            #binding-cells = <0>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        n_tilde: n_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_press>;

            label = "N_TILDE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        open_question: open_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_press>;

            label = "OPEN_QUESTION";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | GRAVE  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E       &kp R  &kp T          &kp Y      &kp U  &kp I         &kp O       &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D       &kp F  &kp G          &kp H      &kp J  &kp K         &kp L       &n_tilde  &kp APOS
&kp SLASH  &kp Z  &kp X  &kp C       &kp V  &kp B          &kp N      &kp M  &kp COMMA     &kp PERIOD  &kp SEMI  &shiftnCaps
                         &lt 5 LGUI  &mo 1  &lt 3 SPACE    &kp SPACE  &mo 2  &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |   START   |  END    |
            // | CLOCK | CTRLZ | SS | FMT | F4  | F3 |  |     |      |  K_MUTE   |  K_VOL_DN   |  K_VOL_UP  |  ESC  |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB              &kp N1             &kp N2         &kp N3         &kp N4  &kp N5    &kp N6    &kp N7          &kp N8     &kp N9      &kp N0      &kp BSPC
&kp DELETE           &kp LC(COMMA)      &kp LA(LS(F))  &kp F3         &kp F4  &kp F5    &kp HOME  &kp UP_ARROW    &kp END    &kp C_NEXT  &kp C_MUTE  &kp C_VOLUME_UP
&mt LSHIFT CAPSLOCK  &kp LA(LC(ENTER))  &kp LS(LA(A))  &kp LC(SLASH)  &trans  &trans    &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp C_PREV  &kp C_PP    &kp C_VOLUME_DOWN
                                                       &trans         &trans  &trans    &kp RET   &trans          &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPCDEL |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |  F5  |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT_SIGN  &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp TILDE
&kp LCTRL  &trans    &trans       &trans    &trans     &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans       &trans    &trans     &kp TILDE    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &open_question
                                  &trans    &kp LC(X)  &trans       &kp RET    &trans     &trans
            >;
        };

        webflow {
            bindings = <
&kp LC(NUMBER_1)  &kp LS(P)      &kp LC(E)      &kp LC(ENTER)  &kp LS(LC(ENTER))  &kp LA(LC(ENTER))    &mo 6          &trans  &trans  &trans  &trans  &trans
&kp LC(NUMBER_2)  &kp S          &kp D          &kp H          &kp Z              &kp LS(LA(ENTER))    &kp RA(LC(V))  &trans  &trans  &trans  &trans  &trans
&kp LS(LC(Z))     &kp LA(LC(G))  &kp LA(LC(A))  &kp LS(LC(A))  &kp LC(LS(Z))      &trans               &trans         &trans  &trans  &trans  &trans  &trans
                                                &trans         &trans             &trans               &trans         &trans  &trans
            >;
        };

        figma {
            bindings = <
&trans  &kp V      &kp H          &kp C              &kp T      &kp F        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(D)  &kp LA(LC(G))  &kp LC(BACKSPACE)  &kp LC(G)  &kp LS(A)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans         &trans             &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans             &trans     &trans       &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp MINUS  &kp EQUAL    &kp N1  &kp N2  &kp N3  &kp MINUS  &kp EQUAL  &trans
&trans  &kp N4  &kp N5  &kp N6  &kp PLUS   &kp FSLH     &kp N4  &kp N5  &kp N6  &kp PLUS   &kp SLASH  &trans
&trans  &kp N7  &kp N8  &kp N9  &kp N0     &kp STAR     &kp N7  &kp N8  &kp N9  &kp N0     &kp STAR   &kp BACKSLASH
                        &trans  &trans     &trans       &trans  &trans  &trans
            >;
        };

        bt {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &kp DELETE
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        gamer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R  &kp T           &tog 7  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &kp A  &kp S  &kp D         &kp F  &kp G           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V  &kp LEFT_ALT    &trans  &trans  &trans  &trans  &trans  &trans
                                &kp CAPSLOCK  &mo 8  &kp SPACE       &trans  &trans  &trans
            >;
        };

        gamer_2 {
            bindings = <
&trans  &trans  &trans  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESCAPE>;
        };

        Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <38 25>;
            layers = <2>;
        };

        Redo {
            bindings = <&kp LC(Y)>;
            key-positions = <38 26>;
            layers = <2>;
        };

        figma_layer_activation {
            bindings = <&tog 4>;
            key-positions = <1 2>;
            layers = <3 4>;
        };

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <30 39>;
            layers = <0 2 1 3 4 5>;
        };

        to_gamer_lay {
            bindings = <&tog 7>;
            key-positions = <6 7 8 19>;
            layers = <1 7>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt_confug {
            if-layers = <1 2 3>;
            then-layer = <6>;
        };
    };
};
